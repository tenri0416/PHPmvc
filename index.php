<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebSocket学習</title>
</head>
<body>
    <h1>Webソケットとは</h1>
    <h3>双方向通信の実現に必要なもの</h3>
    <h5>↓厳密にいうと↓</h5>
    <h3>ブラウザとウェブサーバーとの間で双方向通信を行うための通信規格(プロコトル)<br>サーバー側がユーザー側が常にオンライン状態を維持することによって双方向通信を可能にする</h3>
    <h5>ではHTTPと同じプロコトルなら特にツールやGoogle Chromeで開発する際はライブラリーは必要ないですよね？</h5>
    <h3>Google ChromeではWebSocketをサポートしており、ツールやライブラリーは必要ありません<br>WebSocketはHTML5の一部として標準化されているため、現代の全てのブラウザでほぼサポートされています。</h3>
    <h5>ではWebSocketとはどんなアプリで使わているの？</h5>
    <h3>リアルタイム性が要求されるアプリで使用されています。例えば,チャットアプリ,オンラインゲーム,クラウド電話サービスなどになります</h3>
    <h5>リアルタイムの接続ってHTTPではできないのですか？</h5>
    <h3>HTTPとは基本的に単方向通信です。ブラウザからwebサーバーにリクエストを送信し、<br>webサーバーがそのリクエストに対してレスポンスを返す通信です。<br>
    しかし,HTTPは接続を一度確定したらブラウザからのリクエストを待つか定期的にポーリングして新しいデータがあるか確認することになる。<br>このため、低くなるため、リアルタイムで情報を受け取ることが難しいのです。</h3>
    <h5>ポーリングってなんですか？</h5>
    <h3>Http通信でリアルタイムのアプリを作りたい時に使用する方法です。<br>具体的に説明するとポーリングとはブラウザが定期的に(一定の間隔)でwebサーバーにリクエストを送信して<br>
新しいデータがあるか確認する方法です。流れを説明します</h3>
<ul>
    <h4>チャットアプリでリアルタイムで接続したいためにHTTPのポーリングを使用した場合の流れ</h4>

    <li>1 (チャットでメッセージを送る(おはよう))ブラウザからWebサーバーにリクエストを送信した</li>
    <li >↓</li>
    <li>2 Webサーバーで何かしらの処理をしてその結果をレスポンスをブラウザに返す</li>
    <li>↓</li>
    <li>3 ブラウザでwebサーバーからHTMLを表示する</li>
    <li>↓</li>
    <li>4 ブラウザから新しいメッセージがあるか確認するリクエスト(ポーリング)</li>
    <li>↓</li>
    <li>5 webサーバーがブラウザにレスポンスを返す(メッセージがあろうとなかろうと)（ポーリング）</li>
    <li>↓</li>
    <li>6 ブラウザでwebサーバーからHTMLを表示する(新しいメッセージがある場合は画面リロード、ない場合はリロードされない)</li>

    <h4>4と6を一定期間内に定期的に処理がされる<br>
        HTTPのポーリングではリアルタイムを求めた場合、ポーリングの間隔を短くすると思います。<br>
    短くすることによって通信の効率が低下してwebサーバーも負荷がかかります。ですのでWebソケットをおすすめします。</h4>
</ul>

<h5>では逆にwebソケットで覚えるべき項目を教えてください</h5>
<ul>
    <li>ハンドシェイク</li>
    <li>データフレーム</li>
    <li>プッシュ型通信</li>
    <li>安全性</li>
</ul>
<h5>ハンドシェイクから教えてください</h5>
<h3>ハンドシェイクとは通信を確立する際にブラウザとwebサーバーとの間で行われるプロコトルによる合意の手続きのこと。<br>
Webソケットを接続するにあったって通信プロコトルやセキュリティの設定などを交換して正しく使えるようにすることです。ハンドシェイクではHTTP通信で行われ,
その後の通信ではWebSocketプロコトルが使用されます。</h3>

<h5>レストランで注文で注文するときの店員さんとのやり取りみたいな感じですか？</h5>
<h3>そうですね。</h3>
<ul>
    <li>あなた（ブラウザ）「すいません、豚骨ラーメンお願い致します。」</li>
    <li>店員(webサーバー)「了解しました。豚骨ラーメンですね」</li>
    <li>あなた(クライアント)「お願い致します。」(レスポンスの確認)</li>
</ul>

<h5>なるほど,では次にデータフレームについて教えてください</h5>
<h3>Webソケットのデータフレームとは通信におけるメッセージの単位のことを指しますWebソケットは通信をデータフレームという小さな塊（フレーム）にして分割して送受信します。<br>
これにより、双方向通信を行うためのデータフレームを同時に送信することが可能です。
</h3>
<h5>ではそれではユーザーが検索フォームから「おはよう。今日はいい天気だね、でも気温が４０度だから水は３Lのもうね」<br>
と入力したらwebソケットのデータフレームワークで<br>
１おはよう。<br>
2 今日はいい天気だね、<br>
3でも気温が４０度だから水は３Lのもうね<br>
のように３分割されて送信されるということですか？</h5>


内部ジョイン 合致するもの見
DB外部join




<h3>それは違います。webソケットのデータフレームではテキストを任意のサイズで自動的に分割して送信する仕組みはありません。<br>
データフレームとはフレームという単位で送信します。フレームはパケットとほぼ同じ意味に考えて問題はありませんが<br>
    webソケットにおけるフレームはHTTPでのパケット通信にくらべて、かなり低コストになります。(最小2byte,最大でも14byteで収まる)</h3>

    <h5>それでは最後にプッシュ型通信について教えてください</h5>
    <h3>Webソケットのプッシュ型通信はサーバー新しいデータがある場合にブラウザに対して直接データを送信する通信方法です。<br>
つまり、ブラウザがサーバにリクエストを送信することなく、webサーバーが自発的にデータをプッシュして通信が行われます。</h3>
<h5>ではプッシュ型通信と例えるピザの出前でみたいな感じですか</h5>
<h3>そうです。プッシュ型通信の例（宅配ピザの通知）:
あなた（クライアント）が宅配ピザを注文したとします。宅配ピザの配達員（サーバー）はピザが焼きあがり次第、直接あなたの家にピザを持ってやってきます。あなたは何もしなくても、配達員がピザの到着を通知してくれるので、自宅で待っている間に新しい情報（ピザの到着）を得ることができます。

一方、ポーリングは、定期的にサーバーに情報の有無を問い合わせる方式です。これを例えると、メールの受信を確認する行為になります。</h3>

<h5>次にWebソケットの安全性を教えてください</h5>
<h3>WebそけっとはWebSocketSecure(wss://)を使うことで暗号化された安全な通信を実現できます。これはHTTPのように、データのセキュリティをを保護する為に使用されます</h3>
<h5>WebSocket Secureとはなんですか？</h5>
<h3>WebSocket Secure(WSS)はWebソケットの通信を暗号化してセキュリティを強化するためのプロコトルです。通常Webソケット通信はws://プロコトルを使用しますがWebSocke</h3>
<h5>ではWebソケットの仕組みを改めて教えて下さい</h5>
tではwss://プロコトルを使用します。WSSはHTTPSと同様にデータの暗号化を行うことで通信内容を保護します。これにより、第<h3>
    <ul>
        <li>ハンドシェイク(Webソケット接続リクエスト)</li>
        <li>↓接続成功</li>
        <li>持続的な接続の確立</li>
        <li>↓</li>
        <li>データフレームの使用(フレームごとに分割して送受信可能)</li>
        <li>↓</li>
        <li>ブラウザがwebサーバ-にイベント(メッセージを送信)</li>
        <li>↓</li>
        <li>他のブラウザに表示</li>
    </ul>
</h3>



<h1>まとめ</h1>
<h2>Webソケットとはなに？</h2>

<h3>ブラウザとウェブサーバーとの間で双方向通信(リアルタイム通信)を行うための通信規格(プロコトル)</h3>


<h2>HTTP通信とは ,HTTPでなぜリアルタイム通信ができないの？</h2>

<h3>・一つのコレクションで一つのリクエストしか送ることができない(単方向通信)<br>

・リクエストはクライアントからしかできない(片思い)<br>

・ヘッダーの中の情報量が多い

結論からいうとHTTPでリアルタイム通信はできないことはない、でもレスポンスは遅くなるし、サーバー側の負担が大きくなるよ


HTTPでリアルタイム通信する方法　　　=>ポーリングとは

具体的に説明するとポーリングとはブラウザが定期的に(一定の間隔)でwebサーバーにリクエストを送信して
新しいデータがあるか確認する方法です。チャットアプリで流れを説明します<

<li>1 (チャットでメッセージを送る(おはよう))ブラウザからWebサーバーにリクエストを送信した</li>
    <li >↓</li>
    <li>2 Webサーバーで何かしらの処理をしてその結果をレスポンスをブラウザに返す</li>
    <li>↓</li>
    <li>3 ブラウザでwebサーバーからHTMLを表示する</li>
    <li>↓</li>
    <li>4 ブラウザから新しいメッセージがあるか確認するリクエスト(ポーリング)</li>
    <li>↓</li>
    <li>5 webサーバーがブラウザにレスポンスを返す(メッセージがあろうとなかろうと)（ポーリング）</li>
    <li>↓</li>
    <li>6 ブラウザでwebサーバーからHTMLを表示する(新しいメッセージがある場合は画面リロード、ない場合はリロードされない)</li>
</h3>

webソケットの特性は
一度コネクションを作ると何度でも通信ができる->httpは一度の通信でコネクションを作っていた

サーバーからもクライアントからも通信ができる(両想い)

ヘッダーの量が少ない

代わりにwebソケットを使うとどうなるか
HTTPよりも簡単にリアルタイム接続ができる


難しかったこと驚いたこと
チャットアプリを作成するときに言語をPHPとJavaScriptを使用した場合,両方Webソケットの接続のコードを書かなければいけないということ？

PHPwebソケット実装

1 Ratchet（ラチェット)というライブラリーを入れる（PHP)

2 PHP側の実装
PHPでlocalhost:8080のサーバーを立てた
今回だったらxamppのapache(webサーバー)の中でphpでサーバーを立てている
ただし、apacheとphpサーバー(webソケットサーバー)では別の(操作)プロセスとして動作している
PHPサーバーからJSにwebソケットメッセージで送る場合の形式
文字列,JSON,バイナリー形式
3 JavaScript側の実装
PHPで実装したサーバーに通信をする


   いざ、実装初めて見た場合に全体図を見失った

   WebソケットにPHPとJavaScirpt両方の接続の実装することを知らなかった

   全体図を書いて再確認


   ポートをふやしてみた
   無事に予想の挙動
   ただし、サーバー側に負担がかかる（リソースがくう,特にCPUメモリ),あとポートの競合してしまう


   WebSocket 接続は、確立後 1 時間でタイムアウトします。
   （サーバー側がタイムアウトを検知：サーバー側は、クライアントとの接続が一定時間以上アイドル状態
   (クライアントとサーバーの間でデータの送受信が行われない期間)が続いた場合に、タイムアウトとして接続を切断します。)
   Ratchet（ラチェット)ではタイムアウト設定ができないのか
   ２時間とかにできないのか=>今のところできない


   明日することDB接続(Mysql)午前中
   
   画面をリロード(HTTPリクエスト=>DBデータ取得)

   ハンドシェイク

   ここで通信が開始された




   オブジェクト指向モデルとは

   ソフトウェアの開発のアプローチの一つでプログラムをオブジェクトとしてとらえる方法論(OOP)

   オブジェクト指向モデルでは、現実世界の物体や概念ををプログラム内のオブジェクトとして表現します。
   それぞれのオブジェクトはデータとそれに対する操作（メゾット)を持っており、オブジェクト同士はメッセージのやり取りを
   通じて相互コミュニケーションを行います。このアプローチにより、コードの再利用性,拡張性,保守性が向上するする

   1 カプセル化 保守性
      データとそのデータを操作するメゾットをオブジェクト内にまとめてカプセル化します。

   2 継承 再利用性
      継承クラスは他のクラスを継承することができる。これにより既存のクラスを拡張して新しいクラスを作成し、共通の機能を再利用する

   3 ポリモーフィズム   拡張性
      同じメゾットを持つ、異なるクラスのメゾットがそれぞれのクラスに適した動作を処理する能力をさします。これにより、クラスの型に依存せず、汎用的なコードを記述できる 上書き
      


      namespaceとは(名前空間とは)
      コード内のクラス、関数、定数などの名前を区別する仕組み
      名前空間を使用することで,コード内の同じ名前を持つ要素が衝突するのを防いでコードの可読性や保守性を向上させることができる
      定義
      namespace MyApp
      class Myclass
      呼び出し
      use MyApp\Myclass

      




</body>
</html>
